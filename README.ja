/* -*- Mode: text ; Coding: euc-japan -*- */
/* Time-stamp: <2021-08-28 04:13:14 cyamauch> */

=============================================================================
               Easy and Gratifying Graphics library for X11
                       EGGX / ProCALL  version 0.95
=============================================================================

●はじめに

  EGGX / ProCALL は， 究極の簡単さを目指して作成した X11 グラフィックスライブ
ラリです．懐かしの BASIC 風の関数で簡単に 2D グラフィックスを楽しむことができ
ます．

  このライブラリは，作り始めた頃(1999年頃)は「Pro-FORTRAN」と呼ばれる FORTRAN
の API と互換だったので，「PROCALL」と呼んでいました．しかし，その後の拡張に
よって C の関数は Pro-FORTRAN の原型をとどめていない状態になったので，

 - このライブラリの C の関数群 -> EGGX
 - このライブラリの FORTRAN サブルーチン群 -> ProCALL

と呼ぶことにしました．

 「EGG」とは Xlib の機能の一部を使っているという意味での「卵」と，プログラマ
の「卵」であるビギナーの「絵を描きたい」「ゲームを作りたい」といった希望をか
なえよう，という意味合いがあります．

  EGGX の API を使うと，AfterStep や WindowMaker のアプレットが簡単に作成でき
ます．examples_tutorial ディレクトリの plamoclock.c をご覧いただくとわかりま
すが，デジタル時計程度のものであれば，わずか数十行で作れてしまいます．EGGX を
使ってオリジナルのアプレットを作ってみるのも楽しいかもしれません．

  EGGX/ProCALL が多くの「卵」を育てる道具になれば幸いです．


●インストール方法・補助ツールについて

  INSTALL.ja をご覧ください．


●サンプルコード

  EXAMPLES.ja をご覧ください．


●マニュアル

  pdf のユーザーズガイド eggx_procall.ja.pdf をご覧ください．簡単なチュートリ
アルと関数の詳細な説明があります．

  EGGX/ProCALL の Web ページ，

  http://www.ir.isas.jaxa.jp/~cyamauch/eggx_procall/

  にも同じマニュアルを置いています。


●関数名の convention について．

  EGGX version 0.80 以降では，EGGX の実際の関数名(シンボル名)はすべて eggx_
で始まる名前になっています．例えば gopen() の場合は eggx_gopen() という具合で
す．eggx.h を include すると，すべての関数について #define gopen eggx_gopen
のように，関数名の簡略化のためのマクロ定義が働き，マニュアル通りに EGGX が利
用できるようになっています．
  しかし，本格的なソフトウェア開発で EGGX を利用する場合には，このマクロ定義
が問題になる事があります．具体的には，上記のマクロ定義によって，「構造体等の
メンバ名」が置換されてエラーとなる，といったトラブルです．こういったトラブル
を避けるため，本格的な開発の場合には，eggxlib.h を include し，実際のシンボル
名(eggx_ で始まる関数名)をお使いください．


●注意事項

　16bpp 以上の X サーバでの利用を強くお勧めします．8bpp の Xサーバでは，いく
つかの関数が機能しません．
  Visual を複数持つ Xサーバの場合は，TrueColor Visualが使えれば，EGGX/ProCALL
は TrueColor でウィンドゥを開くようになっています(PseudoColor がデフォルトで
も OK です)．

  以下の 2 つの C 関数，2 つの FORTRAN ルーチンにおいて version 0.85 までとの
互換性が失われています．

 - ggetch 関数
   引数が不要になり，すべてのウィンドゥからの入力を読み取るようになりました．
   Ver.0.90以降では引数を省略し，例えば，
     chr = ggetch();
   のようにコードを書きます(chr に文字コードが返ります)．
   特定のウィンドゥの入力だけを読み取りたい場合は，ggetxpress 関数を使ってく
   ださい．

 - ggetxpress 関数
   Ver.0.85 までは第一引数にウィンドゥ番号を与え，特定のウィンドゥの入力を調
   べるという仕様でした．Ver.0.90 以降では，すべてのウィンドゥの入力を調べ，
   返り値に入力があったウィンドゥ番号が返ります．例えば，
     win_ev = ggetxpress(&type,&b,&x,&y);
   のようにすると，win_ev に入力があったウィンドゥ番号が得られます．
   ⇒ サンプルコード: examples_tutorial/mousetst.c
   従来のコードを修正する場合は，
     type = ggetxpress(win,&b,&x,&y)
       ↓
     if ( ggetxpress(&type,&b,&x,&y) == win ) { ... }
   のように書き換えると良いでしょう．

 - ggetch ルーチン
   第一引数のウィンドゥ番号の指定がなくなり，すべてのウィンドゥからの入力を読
   み取るようになりました．例えば，
     call ggetch(chr)
   のように書くと chr に文字コードが返ります．
   特定のウィンドゥの入力だけを読み取りたい場合は，ggetxpress ルーチンを使っ
   てください．

 - ggetxpress ルーチン
   Ver.0.85 までは第一引数にウィンドゥ番号を与え，特定のウィンドゥの入力を調
   べるという仕様でした．Ver.0.90 以降では，すべてのウィンドゥの入力を調べま
   す．例えば
     call ggetxpress(win_ev,type,b,x,y)
   とした時に，第一引数(この場合はwin_ev)に入力があったウィンドウ番号が「返っ
   て」くる，という仕様に変更されました．
   ⇒ サンプルコード: examples_tutorial/FORTRAN/mouse.f


  詳細は eggx_procall.ja.pdf を御覧ください．


●連絡先

　cyamauch@ir.isas.jaxa.jp

  バグ報告，要望などお待ちしております．
