======================================================================
e_ctrls.h                                     Feb.26.2010 Namio MATUDA
======================================================================

EGGX / ProCall version 0.90 より event が nonblockで捕捉できるようになっ
たので，GUIのプロトタイプを作成してみました．「制御変数値を増減させるボ
タン」と「制御変数値を0,1にトグルで切り替えるボタン」の2種類を用意しま
した．物理シミュレーションにはこの程度で十分だと思います．ボタンの種類
は，構造体にモード切り替えフラグを用いず，名前の先頭文字で切り替えると
いうトリッキーなものです．アンダースコア'_'で始まる場合にトグルスイッチ
として動作します．

さらに，0.91からはマスクを使った透過画像が扱えるようになったので，ボタ
ンの部品などを透過画像に変更しました．また，開発者の山内さんのアドバイ
スを受けて，Callback関数にパラメータ構造体へのポインタを渡せるように仕
様を変更しました．どうもありがとうございます．おかげさまで，大域変数の
使用を減らせるようになりました．（もちろん，ＢＡＳＩＣ風の手軽さに甘え
て小さなプログラムでは，動けばいいやということで，全てを大域変数にする
というコーディングになってしまう例もあります．）


１．使用方法

"e_ctrls.h"をincludeしてください．"btns.h"も必要です．


２．仕様

● e_ctrl構造体は，メニューボタンの名前(name)，制御変数へのポインタ
(*rval)，増減値(dr)，Callback関数(f)，Callbackに渡されるパラメータ構造
体へのポインタで構成されています．トグルボタン動作においても制御変数が
実数であるところに違和感があるとは思います．増減値やCallback関数は省略
できます．

  typedef struct _e_ctrl 
  {
    char    name[30];
    double  *rval;
    double  dr;
    void    (*usr_fnc)(void *);
    void    *usr_ptr;
  } e_ctrl;

● 初期化関数　int init_ctrls(e_ctrl ctrls[], int num)
制御窓のe_ctrl配列を受け取り，ボタンの数(num)に応じて生成した窓のハンド
ルを返却します．窓(w)にはlayerを設定してしまいます．

● メニュー表示関数　
int display_ctrls(int w, _CTRL c[], int num, 
                  float x, float y, int isme, int type, int button)

eventの発生した窓(w)が自分自身(isme)であるかを確認し，マウスクリックか
どうかも判定し(type == ButtonPress)マウスのクリック発生場所(x,y)および
ボタンの種類(button)を解析して処理を実行します．必要に応じて，この関数
内部でgclr(w)，copylayer(w, 1, 0)を実行します．

● 具体的には，_CTRL構造体の配列を定義して以下のように使います．アニメー
ションの初期化や描画などの手続きを関数に分解して記述しなければならない
状況になると思います．初期の仕様では，global変数が増えてしまい，お行儀
が大変悪いコーディングとなりがちで教育的ではありませんでした．「global
変数が許されるのは1ページにソースが収まる場合のみである」という教条を危
うく捨て去るところでした．が，山内さんのアドバイスを受けて仕様をちょっ
と変えただけで，あまり労力を使わずに，変数のスコープを制限した安全なコー
ディングができるようになりました．

...
  void function1(*ptr)
  void function2(*ptr)
...
int main () {
  double var1, var2, var3;...

  e_ctrl ctrls[] = {
    {"Button1", &var1, dvar1, [function1], *ptr}, <- var1を差分値dvar1
                                                                で増減
    {"Button2", &var2, dvar2, [function1], *ptr},
    {"_Button3", &var3, N/A, [function2]},  <-トグルボタン
  };
  int cwin;
  cwin = init_ctrls(ctls, 3);
...
...
  while (!var3) { // var3が終了を制御する変数
    int iscwin, type, button;
    double wx, wy;
    iscwin = ggetxpress(&type, &button, &wx, &wy);
    display_ctrls(cwin, ctrls, 3, wx, wy, iscwin, type, button);
    ....描画...
    msleep(40);
  }
  gcloseall();
  return 0;
}

☆　増減ボタンでは，マウスボタン1でクリックすることを前提にしています．
マウスボタン2（右）でクリックすると差分指定値の1/10，ボタン3（中央）で
クリックすると差分指定値の10倍で変化します．

☆　パラメータ構造体の要素を変数にするか，変数へのポインタ（つまり
var1, var2, var3へのエイリアス）とするかは好みの問題です．私はなるべく，
変数へのポインタを使う方法を選択しました．

☆　物理シミュレーションでは球をよく使います．POV-Rayで3Dの球を描き，そ
の後，透過背景に変換した半径4,6,8,10ピクセルの小球のデータをおまけに付
けます．（wood.h, stone.h, gold.h, silver.h, red.h, cyan.h, green.h,
orange.h）球の色を変えるだけで雰囲気が随分かわりますから，楽しんでくだ
さい．


いろいろとご不満な点が多いと思いますのでご意見をお寄せください．
======================================================================
                                                         2010年2月26日
                                                            松田七美男
